#!/bin/bash

# Funcs and vars
s_appname=""
s_apptype=""
s_apploc=""
declare -A s_appopts
s_usercwd=`pwd`
__errtxt='\e[0;1;31m[CLApp]'

# Getter/Setters for states
__gstype() {
  [ -z "$1" ] && echo "$s_apptype" || s_apptype="$1"
}
__gsname() {
  [ -z "$1" ] && echo "$s_appname" || s_appname="$1"
}
__gsloc() {
  [ -z "$1" ] && echo "$s_apploc" || s_apploc="$1"
}
__gsopts() {
  if [ -z "$1" ]; then
    for key in "${!s_appopts[@]}"; do
        echo "$key: ${s_appopts[$key]}"
    done
  else
    for arg in $@; do
      local option="`echo "$arg" | cut -d '=' -f1`"
      local value="`echo "$arg" | cut -d '=' -f2`"

      s_appopts[$option]="$value"
    done
  fi
}

# Functionality
# __mknode() {}
# __mkpy() {}
# __mksh() {}
__args() {
  while [[ "$1" =~ "-" ]]; do
    # Arg parsing failure will force exit the program
    case $1 in
      -t | --type )
        shift; [ ! -z "$1" ] && __gstype "$1" || ( echo "Must supply value to argument!"; exit )
        ;;
      -n | --name )
        shift; [ ! -z "$1" ] && __gsname "$1" || ( echo "Must supply value to argument!"; exit )
        ;;
      -l | --location )
        shift; [ ! -z "$1" ] && __gsloc "$1" || ( echo "Must supply value to argument!"; exit )
        ;;
      -o | --options )
        # This should be last, otherwise the function may fail, make sure next 2 args are options
        shift;
        # echo "$@"
        if [[ "$1" =~ "=" ]]; then
          __gsopts "$@"
        else
          echo "'-o' must only be followed by options, if you want to pass other arguments, put them before '-o'!"
          exit
        fi
        ;;
      -h | --help )
        echo "`cat ~/.clapp/help`"
        exit;;
      -v | --version )
        echo "`cat ~/.clapp/version`"
        exit;;
      -u | --update )
        echo "Updating CLApp..."
        $(find ~ -type d -name clapp)/install
        exit;;
      * )
        echo "Option '$1' not found!"
        exit;;
    esac
    shift
  done;
  # __gsopts
}