#!/bin/bash
# SOURCE THIS FILE FOR HEREDOC INTERPOLATION

# Normal
__FRONTDOC=$(cat << LIB
# $s_appname's Functions and Variables

# Vars
__cwd="\$(pwd)"
prgroot="\$HOME/.${s_appname,,}"

declare -A lists # For any lists your app may need as reference

# Config
__loadcfg() {
	local cfg="\$prgroot/.cfg"
	# Write config variables below like so: name=\$(cat "\$cfg" | grep 'name' | cut -d '=' -f2)
}
# Config vars will be set via function in-case of needing reloaded
__loadcfg

# Funcs
__cfg() {
	local cfg="\$prgroot/.cfg"
	while [[ -n "\$1" ]]; do
		if [[ "\$1" =~ '=' ]]; then
			local rule="\$(echo "\$1" | cut -d '=' -f1)"
			local oldvalue="\$(cat "\$cfg" | grep "\$rule" | cut -d '=' -f2)"
			local newvalue="\$(echo "\$1" | cut -d '=' -f2)"
			sed -i -e "s/\$rule=\$oldvalue/\$rule=\$newvalue/" "\$cfg"
			log "Updated rule \$rule from \$oldvalue to \$newvalue!"
		elif [[ "\$1" == 'list' ]]; then
			log "Current Settings:"
			cat "\$cfg"
			return
		elif [[ "\$1" == 'RESET' ]]; then
			__args --reset-cfg
		fi
		log "Rule: \$(cat "\$cfg" | grep ^\$1$ || echo "No Rule Found!")"
	shift; done
}
LIB
)
__BACKDOC=$(cat << BAK
error() { echo -e '\\\e[0;1;31m[ERROR]\\\e[0;0;0m '"\$1" >&2; }
verbose() { [[ -n "\$VERBOSE" ]] && echo -e '\\\e[0;1;35m[VERBOSE]\\\e[0;0;0m '"\$1"; }
log() { echo -e '\\\e[0;1;32m[${s_appname^^}]\\\e[0;0;0m '"\$1"; }
BAK
)
__ARGFUNCDOC=$(cat << ARG
__args() {
	# Process args
	[[ -z "\$1" ]] && cat "\$prgroot"/help | head -1 && exit
	while [[ "\$1" =~ '-' ]]; do
		# End case statements with 'exit;;' to ensure program only runs that argument
		# Otherwise use 'exit;;' when you want to bail out due to erroneous behaviour
		case "\$1" in
			-C | --config )
				shift
				[[ ! -z "\$1" ]] && __cfg "\$@" || ( error "Must supply rule or 'list'!"; exit )
				exit;;
			--reset-cfg )
				log "Resetting ${s_appname} to default configuration..."
				cp -rf \$(find "\$HOME" -type d -name ${s_appname,,} 2>/dev/null | head -1)/.${s_appname,,} "\$HOME/" && echo "${s_appname}'s config has been reset!" || error "Failed to reset defaults!"
				exit;;
			-\\? | -h | --help )
				cat "\$prgroot/help"
				exit;;
			-v | --version )
				cat "\$prgroot/version"
				exit;;
			-V | --verbose )
				VERBOSE=true
				;;
			* ) # Catch-all
				if [[ \$(type -t __cmds) == "function" && ! "\$1" =~ '-' ]]; then
					__cmds "\$@"
				else
					cat "\$prgroot/help" | head -1
					error "\\"\$1\\" is not an argument!"
					exit
				fi
				return;;
		esac
	shift; done
}
ARG
)
__ALTFUNCDOC=$(cat << ALT
__args() {
	# Process args
	[[ -z "\$1" ]] && cat "\$prgroot"/help | head -1 && exit
	while [[ "\$1" =~ '-' ]]; do
		# End case statements with 'return;;' to allow for arglist to be passed around and continue execution
		# Otherwise use 'exit;;' when you want to bail out due to erroneous behaviour
		# Each statement should look like this:
		# <ARG> | <ALTARGVERSION> ); shift
		#   DATA VALIDATION
		#   <FUNC> "\$@"
		#   return;;
		case "\$1" in
			-C | --config )
				shift; [[ ! -z "\$1" ]] && __cfg "\$@" || ( error "Must supply rule or 'list'!"; exit )
				return;; # So the function doesn't endlessly recurse
			--reset-cfg )
				log "Resetting ${s_appname} to default configuration..."
				cp -rf \$(find "\$HOME" -type d -name ${s_appname,,} 2>/dev/null | head -1)/.${s_appname,,} "\$HOME/" && echo "${s_appname}'s config has been reset!" || error "Failed to reset defaults!"
				exit;;
			-\\? | -h | --help )
				cat "\$prgroot/help"
				exit;;
			-v | --version )
				cat "\$prgroot/version"
				exit;;
			-V | --verbose )
				VERBOSE=true
				;;
			* ) # Catch-all
				if [[ \$(type -t __cmds) == "function" && ! "\$1" =~ '-' ]]; then
					__cmds "\$@"
				else
					cat "\$prgroot/help" | head -1
					error "\\"\$1\\" is not an argument!"
					exit
				fi
				return;;
		esac
	shift; done
}
ALT
)
__CMDFUNCDOC=$(cat << CMD
lists[cmd]="^(config|help|version)$" # To be tested against
__cmds() {
	# Process commands
	# Adjust the args command accordingly if desired
	[[ -z "\$1" ]] && cat "\$prgroot"/help | head -1 && exit
	while [[ true ]]; do
		# End case statements with 'exit;;' to run just the one command
		# Otherwise use 'exit;;' when you want to bail out due to erroneous behaviour
		case "\${1,,}" in
			config )
				shift; [ ! -z "\$1" ] && __cfg "\$@" || ( error "Must supply rule or 'list'!"; exit )
				return;; # So the function doesn't endlessly recurse
			help )
				cat "\$prgroot/help"
				exit;;
			version )
				cat "\$prgroot/version"
				exit;;
			* ) # Catch-all
				if [[ "\$1" =~ '-' ]]; then
					__args "\$@"
				else
					cat "\$prgroot/help" | head -1
					error "\\"\$1\\" is not a command!"
					exit
				fi
				return;;
		esac
	shift; done
}
CMD
)
__STATEDOC=$(cat << STATE
# Set app states in the following format:
# states[name]=""
declare -A states
states[cfg]="" # Any text within a bool state signifies true, less is better

# Add commands to the regex string below, separated by '|'
lists[cmds]="^(config|verbose|help|version)$"

__args() {
	# Process args
	[[ -z "\$1" ]] && cat "\$prgroot"/help | head -1 && exit
	while [[ -n "\$1" ]]; do
		case "\${1}" in
			-C | --config )
				states[cfg]="t"
				;;
			--reset-cfg )
				log "Resetting ${s_appname} to default configuration..."
				cp -rf \$(find "\$HOME" -type d -name ${s_appname,,} 2>/dev/null | head -1)/.${s_appname,,} "\$HOME/" && echo "${s_appname}'s config has been reset!" || error "Failed to reset defaults!"
				exit;;
			-V | --verbose )
				VERBOSE=true
				;;
			-\\? | --help ) # Not using -h to leave it open for other possible args
				cat "\$prgroot/help"
				exit;;
			-v | --version )
				cat "\$prgroot/version"
				exit;;
			* ) # Catch-all
				if [[ "\$1" =~ \${lists[cmds]} ]]; then
					__cmds "\$1"
					return 0
				else
					cat "\$prgroot/help" | head -1
					error "'\$1' is not an argument!"
					exit
				fi
				;;
		esac
	shift; done
}
__cmds() {
	# Process commands
	[[ -z "\$1" ]] && cat "\$prgroot"/help | head -1 && exit
	while [[ -n "\$1" ]]; do
		case "\${1,,}" in
			@(config) )
				states[cfg]="t"
				;;
			@(verbose) )
				VERBOSE=true
				;;
			@(help) ) # Not using -h to leave it open for other possible args
				cat "\$prgroot/help"
				exit;;
			@(version) )
				cat "\$prgroot/version"
				exit;;
			* ) # Catch-all
				if [[ "\$1" =~ ^- ]]; then
					__args "\$1"
					return 0
				else
					verbose "Grepped command: '\$(echo "\${lists[cmds]}" | sed -e 's/\\^\\|[\\(]\\|[\\)]\\|\\\$//g' -e 's/[\\|]/\\\n/g' | grep "\$1")'"
					error "'\$1' is not a command!"
					error "Did you mean to use '\$(echo "\${lists[cmds]}" | sed -e 's/\\^\\|[\\(]\\|[\\)]\\|\\\$//g' -e 's/[\\|]/\\\n/g' | grep "\$1")'?"
					exit
				fi
				;;
		esac
	shift; done
}
STATE
)

__SHLIB="$([[ "$__STATE" == "true" ]] && echo "${__FRONTDOC}\n$__STATEDOC\n${__BACKDOC}" || echo "${__FRONTDOC}\n$([[ "$__ALT" == "true" ]] && echo "$__ALTFUNCDOC" || echo "$__ARGFUNCDOC")\n\n$([[ "$__CMD" == "true" ]] && echo "$__CMDFUNCDOC\n")${__BACKDOC}")"
# EOF