#!/bin/bash

# CLApp
# Generates folder and file structures for CLI-apps

# Currently supported:
#  - Bash
#  - Node Web App (Various options)
#  - Python Web App (Flask, Django)
#

# Check for updates to the repo
if [[ `diff $(find $HOME -type d -name clapp)/.clapp $HOME/.clapp` || `diff $(find $HOME -type d -name clapp)/clapp $HOME/bin/clapp` ]]; then read -p "CLApp has an update available! Install? " yn; if [[ "${yn,}" =~ 'y' ]]; then echo "Updating CLApp..."; `find $HOME -type d -name clapp`/install; fi; fi

# Load lib
. $HOME/.clapp/.lib

# Main container
clapp() {
  # Set prog states or list usage since this cannot run without args
  if [ ! -z "$1" ]; then
    __args $@
  else
    echo "`cat $HOME/.clapp/help | head -1`"
    return
  fi

  # Parse states into respective apps
  case "${s_apptype,}" in
    n | node )
      __mknode # No args required as the function relies on the states
      ;;
    py | python )
      __mkpy
      ;;
    sh | bash )
      __mksh
      ;;
    * )
      $__errtxt"App type unknown! Defaulting to general project structure!"
      s_apptype="sh" # Set since the type was overridden with unknown type
      ;;
  esac
}

# Run container
clapp $@

# Cleanup when sourced (should not be sourced!)
unset clapp __args __mknode __mkpy __mksh __opts __gstype __gsname __gsloc __gsopts __errtxt __systxt __devtxt __cwd __srced s_appname s_apptype s_apploc s_appopts