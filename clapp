#!/usr/bin/env bash

# CLApp
# Generates folder and file structures for CLI-apps

# Currently supported (Fully Functional in Bash 4+, legacy compliance not guaranteed):
#  - Bash
#  - Node Web App (Various options)
#  - Python Web App (Flask, Django)

shopt -qs extglob

# Ensure clapp is installed if the user tries to run it from the repo
[[ ! -e "$HOME/.clapp" ]] && { mkdir "$HOME/.clapp"; "$repo/install"; }

# Grab repo and begin autoupdate process
autoupdate="$(cat "$HOME/.clapp/.cfg" | grep 'autoup' | cut -d '=' -f2)"

if [[ "$autoupdate" == "true" ]]; then
  if [[ -e "$HOME/repos/clapp" ]]; then
		repo="$HOME/repos/clapp"
	else
		repo="$(find "$HOME" -type d -name clapp 2>/dev/null)"
	fi

  # Check for updates
  if [[ -n "$(diff "$repo/.clapp/.lib" "$HOME/.clapp/.lib")" \
  || -n "$(diff "$repo/.clapp/postbash4.lib" "$HOME/.clapp/postbash4.lib")" \
  || -n "$(diff "$repo/.clapp/prebash4.lib" "$HOME/.clapp/prebash4.lib")" \
  || -n "$(diff "$repo/.clapp/version" "$HOME/.clapp/version")" \
  || -n "$(diff "$repo/.clapp/help" "$HOME/.clapp/help")" \
  || -n "$(diff "$repo/.clapp/clapp-comp" "$HOME/.d/clapp-comp")" \
  || -n "$(diff "$repo/.clapp/assets/bash" "$HOME/.clapp/assets/bash")" \
  || -n "$(diff "$repo/.clapp/assets/node" "$HOME/.clapp/assets/node")" \
  || -n "$(diff "$repo/.clapp/assets/python" "$HOME/.clapp/assets/python")" \
  || -n "$(diff "$repo/.clapp/docs" "$HOME/.clapp/docs")" \
  || -n "$(diff "$repo/clapp" "$HOME/bin/clapp")" ]]; then
    "$repo/install"
  fi
fi

# Load lib
source "$HOME"/.clapp/.lib

# Check for unit test
if [[ "$CLAPP_TST" == "true" ]]; then
  # Load the lib from the repo and set prgroot to repo
  echo -e "UNIT TEST MODE! READING FROM REPO!"
  prgroot="$repo/.clapp"
fi

# Main container
clapp() {
  if [ -z "$1" ]; then
    echo "$(cat "$HOME/.clapp/help" | head -1)"
    exit 1
  fi

  # Run arg parser
  __args "$@"
  
  # Parse states into respective apps
  case "${s_apptype}" in
    js | node | javascript )
      # echo "Type disabled for now"
      __mknode # No args required as the function relies on the states
      ;;
    py | python )
      # echo "Type disabled for now"
      __mkpy
      ;;
    sh | bash )
      __mksh
      ;;
    * )
      error "App type unknown! Defaulting to general project structure!"
      s_apptype="sh" # Set since the type was overridden with unknown type
      __mksh
      ;;
  esac
}

# Run container
clapp "$@"

# Cleanup when sourced (should not be sourced!)
[[ "$$" -eq "$BASHPID" ]] && { unset clapp __args __mknode __mkpy __mksh __opts __gstype __gsname __gsloc __gsopts __errtxt __systxt __devtxt __cwd __srced s_appname s_apptype s_apploc s_appopts autoupdate repo __ALT __CMD; shopt -qu extglob; }

exit 0 # Ensure a good exit status upon final completion unless the program breaks earlier
