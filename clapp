#!/bin/bash

# CLApp
# Generates folder and file structures for CLI-apps

# Currently supported:
#  - Bash
#  - Node Web App (Various options)
#  - Python Web App (Flask, Django)
#

autoupdate=`cat $HOME/.bsm/.cfg | grep 'autoup' | cut -d '=' -f2`
repo=$(find $HOME -type d -name clapp)

# Check for unit test
if [[ $CLAPP_TST ]]; then
  # Load the lib from the repo and set prgroot to repo
  echo -e "UNIT TEST MODE! READING FROM REPO!"
  source $repo/.clapp/.lib
  prgroot="$repo/.clapp"
elif [[ $autoupdate ]]; then
  # Check for updates
  [ ! -d $HOME/.clapp ] && $repo/install
  if [[ `diff $repo/.clapp/.lib $HOME/.clapp/.lib` || `diff $repo/.clapp/version $HOME/.clapp/version` || `diff $repo/.clapp/help $HOME/.clapp/help` || `diff $repo/.clapp/assets $HOME/.clapp/assets` || `diff $repo/clapp $HOME/bin/clapp` ]]; then echo "Update found! Installing..."; $repo/install; fi

  # Load lib
  source $HOME/.clapp/.lib
else
  source $HOME/.clapp/.lib
fi

# Main container
clapp() {
  if [ -z "$1" ]; then
    echo "`cat $HOME/.clapp/help | head -1`"
    return
  fi

  # Set prog states or list usage since this cannot run without args
  __args $@
  
  # Parse states into respective apps
  case "${s_apptype,}" in
    n | node )
      __mknode # No args required as the function relies on the states
      ;;
    py | python )
      __mkpy
      ;;
    sh | bash )
      __mksh
      ;;
    * )
      $__errtxt"App type unknown! Defaulting to general project structure!"
      s_apptype="sh" # Set since the type was overridden with unknown type
      ;;
  esac
}

# Run container
clapp $@

# Cleanup when sourced (should not be sourced!)
unset clapp __args __mknode __mkpy __mksh __opts __gstype __gsname __gsloc __gsopts __errtxt __systxt __devtxt __cwd __srced s_appname s_apptype s_apploc s_appopts autoupdate repo